<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\water_level_ctrl_04.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\water_level_ctrl_04.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue May 10 15:39:26 2022
<BR><P>
<H3>Maximum Stack Usage =        796 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Appl_Proc &rArr; Ctrl_Water_Lvl_FSM_Proc &rArr; Reset_Water_Lvl_Datas &rArr; Enable_Ext_Interrupt &rArr; Non_GPIO_Func_Set &rArr; Config_Port_Pin_Validate &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[2b]">Reset_Handler</a>
 <LI><a href="#[48]">__user_initial_stackheap</a>
 <LI><a href="#[2c]">Undef_Handler</a>
 <LI><a href="#[2d]">SWI_Handler</a>
 <LI><a href="#[2e]">PAbt_Handler</a>
 <LI><a href="#[2f]">DAbt_Handler</a>
 <LI><a href="#[30]">IRQ_Handler</a>
 <LI><a href="#[31]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[60]">IO_Channel_Write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[ae]">Put_Char</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[61]">UART_Transmit_Char</a><BR>
 <LI><a href="#[ac]">Num_To_Str_Conv_No_Conf_Size</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[af]">Put_Str</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[64]">UART_Transmit_Str</a><BR>
 <LI><a href="#[65]">Str_Len</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[5e]">Print</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[91]">Error_Or_Warning_UART_Proc</a><BR>
 <LI><a href="#[5c]">Check_GPIO_Func</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[5d]">IO_Ch_Validate</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[91]">Error_Or_Warning_UART_Proc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[92]">Error_or_Warning_LCD_Proc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5f]">Comm_Error_Proc</a><BR>
 <LI><a href="#[70]">Timer_Stop</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[18]">SW_Press_Proc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[bd]">SW_Read</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[78]">Test_Consucc_Bits</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[bb]">SW_Ch_Validate</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[9c]">IO_Channel_Read</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[71]">SW_Oper</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[9b]">IO_Ch_To_SW_Ch</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[72]">LCD_Data_Disp</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[63]">LCD_Disp_Str</a><BR>
 <LI><a href="#[67]">LCD_Disp_Num</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[63]">LCD_Disp_Str</a><BR>
 <LI><a href="#[a7]">LCD_Write_Data_to_IO_Ch</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[92]">Error_or_Warning_LCD_Proc</a><BR>
 <LI><a href="#[a2]">LCD_Read_Command</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[ab]">LCD_Read_Data_from_IO_Ch</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[92]">Error_or_Warning_LCD_Proc</a><BR>
 <LI><a href="#[a1]">LCD_Check_Busy</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[92]">Error_or_Warning_LCD_Proc</a><BR>
 <LI><a href="#[9d]">IO_Channels_Func_Set</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[16]">SW_Disable</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[14]">SW_No_Access</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[b8]">Reset_SW_Ch</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[69]">Config_Consucc_Bits</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[6c]">Config_Port_Pin_Range_Validate</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[9e]">Trace_IO_Func_Set_Validate</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[81]">Debug_IO_Func_Set_Validate</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[6a]">Config_GPIO_Func_Set</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[6b]">GPIO_Func_Set</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[8b]">IO_Ch_Func_Reset</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[9a]">SW_Ch_UnConfig_By_IO_Ch</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[51]">Error_or_Warning_Proc</a><BR>
 <LI><a href="#[a4]">LCD_Write_Command</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[92]">Error_or_Warning_LCD_Proc</a><BR>
 <LI><a href="#[62]">LCD_Disp_Goto_XY</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[92]">Error_or_Warning_LCD_Proc</a><BR>
 <LI><a href="#[2c]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">Undef_Handler</a><BR>
 <LI><a href="#[2d]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">SWI_Handler</a><BR>
 <LI><a href="#[2e]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e]">PAbt_Handler</a><BR>
 <LI><a href="#[2f]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">DAbt_Handler</a><BR>
 <LI><a href="#[30]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30]">IRQ_Handler</a><BR>
 <LI><a href="#[31]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2f]">DAbt_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1b]">Ext_Interrupt_0_Proc</a> from appl.o(i.Ext_Interrupt_0_Proc) referenced 2 times from isr.o(.data)
 <LI><a href="#[1c]">Ext_Interrupt_1_Proc</a> from appl.o(i.Ext_Interrupt_1_Proc) referenced 2 times from isr.o(.data)
 <LI><a href="#[1d]">Ext_Interrupt_2_Proc</a> from appl.o(i.Ext_Interrupt_2_Proc) referenced 2 times from isr.o(.data)
 <LI><a href="#[1e]">Ext_Interrupt_3_Proc</a> from appl.o(i.Ext_Interrupt_3_Proc) referenced 2 times from isr.o(.data)
 <LI><a href="#[31]">FIQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[30]">IRQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[28]">ISR_Brown_Out_Detect</a> from main.o(i.ISR_Brown_Out_Detect) referenced 2 times from main.o(.data)
 <LI><a href="#[24]">ISR_Ext_Interrupt_0</a> from isr.o(i.ISR_Ext_Interrupt_0) referenced 2 times from main.o(.data)
 <LI><a href="#[25]">ISR_Ext_Interrupt_1</a> from isr.o(i.ISR_Ext_Interrupt_1) referenced 2 times from main.o(.data)
 <LI><a href="#[26]">ISR_Ext_Interrupt_2</a> from isr.o(i.ISR_Ext_Interrupt_2) referenced 2 times from main.o(.data)
 <LI><a href="#[27]">ISR_Ext_Interrupt_3</a> from isr.o(i.ISR_Ext_Interrupt_3) referenced 2 times from main.o(.data)
 <LI><a href="#[34]">ISR_Non_Vector_IRQ</a> from isr.o(i.ISR_Non_Vector_IRQ) referenced from isr.o(i.Reset_All_Interrupts)
 <LI><a href="#[23]">ISR_PLL</a> from main.o(i.ISR_PLL) referenced 2 times from main.o(.data)
 <LI><a href="#[1f]">ISR_Timer_0</a> from timer.o(i.ISR_Timer_0) referenced 2 times from main.o(.data)
 <LI><a href="#[20]">ISR_Timer_1</a> from timer.o(i.ISR_Timer_1) referenced 2 times from main.o(.data)
 <LI><a href="#[21]">ISR_UART_0</a> from uart.o(i.ISR_UART_0) referenced 2 times from main.o(.data)
 <LI><a href="#[22]">ISR_UART_1</a> from uart.o(i.ISR_UART_1) referenced 2 times from main.o(.data)
 <LI><a href="#[e]">LCD_Allow_Access</a> from lcd.o(i.LCD_Allow_Access) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[b]">LCD_DeInit</a> from lcd.o(i.LCD_DeInit) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[f]">LCD_Disable</a> from lcd.o(i.LCD_Disable) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[10]">LCD_Enable</a> from lcd.o(i.LCD_Enable) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[c]">LCD_Init</a> from lcd.o(i.LCD_Init) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[d]">LCD_No_Access</a> from lcd.o(i.LCD_No_Access) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[11]">LCD_Write</a> from lcd.o(i.LCD_Write) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[2e]">PAbt_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2b]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2d]">SWI_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[15]">SW_Allow_Access</a> from sw_lib.o(i.SW_Allow_Access) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[15]">SW_Allow_Access</a> from sw_lib.o(i.SW_Allow_Access) referenced from sw_lib.o(i.SW_Oper)
 <LI><a href="#[12]">SW_DeInit</a> from sw_lib.o(i.SW_DeInit) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[12]">SW_DeInit</a> from sw_lib.o(i.SW_DeInit) referenced from sw_lib.o(i.SW_Oper)
 <LI><a href="#[16]">SW_Disable</a> from sw_lib.o(i.SW_Disable) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[16]">SW_Disable</a> from sw_lib.o(i.SW_Disable) referenced from sw_lib.o(i.SW_Oper)
 <LI><a href="#[17]">SW_Enable</a> from sw_lib.o(i.SW_Enable) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[17]">SW_Enable</a> from sw_lib.o(i.SW_Enable) referenced from sw_lib.o(i.SW_Oper)
 <LI><a href="#[13]">SW_Init</a> from sw_lib.o(i.SW_Init) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[13]">SW_Init</a> from sw_lib.o(i.SW_Init) referenced from sw_lib.o(i.SW_Oper)
 <LI><a href="#[14]">SW_No_Access</a> from sw_lib.o(i.SW_No_Access) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[14]">SW_No_Access</a> from sw_lib.o(i.SW_No_Access) referenced from sw_lib.o(i.SW_Oper)
 <LI><a href="#[18]">SW_Press_Proc</a> from sw_lib.o(i.SW_Press_Proc) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[29]">Timer_0_Timeout_Proc</a> from appl.o(i.Timer_0_Timeout_Proc) referenced 2 times from timer.o(.data)
 <LI><a href="#[2a]">Timer_1_Timeout_Proc</a> from appl.o(i.Timer_1_Timeout_Proc) referenced 2 times from timer.o(.data)
 <LI><a href="#[6]">UART_Allow_Access</a> from uart.o(i.UART_Allow_Access) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[3]">UART_DeInit</a> from uart.o(i.UART_DeInit) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[7]">UART_Disable</a> from uart.o(i.UART_Disable) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[8]">UART_Enable</a> from uart.o(i.UART_Enable) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[4]">UART_Init</a> from uart.o(i.UART_Init) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[5]">UART_No_Access</a> from uart.o(i.UART_No_Access) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[9]">UART_Receive_Char</a> from uart.o(i.UART_Receive_Char) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[19]">UART_Receive_Enable_Ctrl</a> from uart.o(i.UART_Receive_Enable_Ctrl) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[a]">UART_Transmit</a> from uart.o(i.UART_Transmit) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[1a]">UART_Transmit_Enable_Ctrl</a> from uart.o(i.UART_Transmit_Enable_Ctrl) referenced 2 times from dev_oper.o(.data)
 <LI><a href="#[2c]">Undef_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[35]">__main</a> from __main.o(!!!main) referenced from startup.o(RESET)
 <LI><a href="#[33]">main</a> from main.o(i.main) referenced from __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2b]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[36]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[38]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[bf]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[c0]"></a>__decompress</STRONG> (ARM, 68 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[c1]"></a>__decompress0</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[c2]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[3c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[c3]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[c4]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[c5]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[c6]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[c7]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[c8]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[c9]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[ca]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[cb]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[cc]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[cd]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[ce]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[cf]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[d0]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[d1]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[d2]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[d3]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[d4]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[d5]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[d6]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[d7]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[40]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[d8]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[d9]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[da]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[db]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[dc]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[dd]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[de]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[df]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[37]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[e0]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[39]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3b]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[e1]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3d]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; exit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[e2]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[4a]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[3f]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[e3]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[41]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via Veneer)
</UL>

<P><STRONG><a name="[48]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b0]"></a>strcpy</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Put_Str (via Veneer)
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_memcpy</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Data_Retrieve_Para
</UL>

<P><STRONG><a name="[43]"></a>__rt_memcpy</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[e4]"></a>_memcpy_lastbytes</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>__aeabi_memclr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Flush
</UL>

<P><STRONG><a name="[45]"></a>__rt_memclr</STRONG> (ARM, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[e5]"></a>_memset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Data_ID_Status
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num_To_Str_Conv_No_Conf_Size
</UL>

<P><STRONG><a name="[e9]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[ec]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[f0]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[3e]"></a>exit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[42]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit (via Veneer)
</UL>

<P><STRONG><a name="[f1]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[4b]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Num
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Run
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Num
</UL>

<P><STRONG><a name="[f4]"></a>__semihosting_library_function</STRONG> (ARM, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>Appl_Data_Retrieve_Para</STRONG> (ARM, 692 bytes, Stack size 16 bytes, gen_std_lib_part_1.o(i.Appl_Data_Retrieve_Para))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + Unknown Stack Size
<LI>Call Chain = Appl_Data_Retrieve_Para &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_IDs_Set_Para
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_ID_Set_Para
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
</UL>

<P><STRONG><a name="[53]"></a>Appl_HW_Init</STRONG> (ARM, 232 bytes, Stack size 8 bytes, appl.o(i.Appl_HW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 724 + Unknown Stack Size
<LI>Call Chain = Appl_HW_Init &rArr; SW_Init &rArr; SW_Ch_ID_Check_And_Alloc &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_Dev_Init
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[55]"></a>Appl_Init</STRONG> (ARM, 80 bytes, Stack size 8 bytes, appl.o(i.Appl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 780 + Unknown Stack Size
<LI>Call Chain = Appl_Init &rArr; Next_Data_Conf_Parameter &rArr; Data_Dev_Src_Access_Oper_Func &rArr; Cur_Data_ID_Devs_Src_Basic_Oper_Func &rArr; Cur_Data_ID_Dev_Src_Basic_Oper_Func &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Next_Data_Conf_Parameter
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>Appl_Proc</STRONG> (ARM, 100 bytes, Stack size 8 bytes, appl.o(i.Appl_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 788 + Unknown Stack Size
<LI>Call Chain = Appl_Proc &rArr; Ctrl_Water_Lvl_FSM_Proc &rArr; Reset_Water_Lvl_Datas &rArr; Enable_Ext_Interrupt &rArr; Non_GPIO_Func_Set &rArr; Config_Port_Pin_Validate &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctrl_Water_Lvl_FSM_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>Appl_Reset</STRONG> (ARM, 80 bytes, Stack size 8 bytes, appl.o(i.Appl_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 740 + Unknown Stack Size
<LI>Call Chain = Appl_Reset &rArr; Appl_Reset_Proc &rArr; Reset_Water_Lvl_Datas &rArr; Enable_Ext_Interrupt &rArr; Non_GPIO_Func_Set &rArr; Config_Port_Pin_Validate &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Reset_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Process
</UL>

<P><STRONG><a name="[5a]"></a>Appl_Reset_Proc</STRONG> (ARM, 24 bytes, Stack size 8 bytes, appl.o(i.Appl_Reset_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 732 + Unknown Stack Size
<LI>Call Chain = Appl_Reset_Proc &rArr; Reset_Water_Lvl_Datas &rArr; Enable_Ext_Interrupt &rArr; Non_GPIO_Func_Set &rArr; Config_Port_Pin_Validate &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Water_Lvl_Datas
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Reset
</UL>

<P><STRONG><a name="[5c]"></a>Check_GPIO_Func</STRONG> (ARM, 556 bytes, Stack size 32 bytes, io_lib.o(i.Check_GPIO_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + In Cycle
<LI>Call Chain = Check_GPIO_Func &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_Validate
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Read
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channel_Write
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channel_Read
</UL>

<P><STRONG><a name="[5f]"></a>Comm_Error_Proc</STRONG> (ARM, 1152 bytes, Stack size 88 bytes, gen_std_lib_part_1.o(i.Comm_Error_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 612 + Unknown Stack Size
<LI>Call Chain = Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Str
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Num
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Char
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Len
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Str
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Num
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Goto_XY
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Char
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channel_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_LCD_Proc
</UL>

<P><STRONG><a name="[69]"></a>Config_Consucc_Bits</STRONG> (ARM, 228 bytes, Stack size 24 bytes, gen_std_lib_part_1.o(i.Config_Consucc_Bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = Config_Consucc_Bits &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Read
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Ch_ID_Check_And_Alloc
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_Func_Reset
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Port_Pin_Range_Validate
</UL>

<P><STRONG><a name="[6c]"></a>Config_Port_Pin_Range_Validate</STRONG> (ARM, 244 bytes, Stack size 32 bytes, io_lib.o(i.Config_Port_Pin_Range_Validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + In Cycle
<LI>Call Chain = Config_Port_Pin_Range_Validate &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Consucc_Bits
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_Validate
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channels_Func_Set
</UL>

<P><STRONG><a name="[6f]"></a>Ctrl_Water_Lvl_Error_Proc</STRONG> (ARM, 336 bytes, Stack size 16 bytes, appl.o(i.Ctrl_Water_Lvl_Error_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 420 + Unknown Stack Size
<LI>Call Chain = Ctrl_Water_Lvl_Error_Proc &rArr; LCD_Data_Disp &rArr;  LCD_Disp_Str (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Stop
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Oper
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channel_Write
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Data_Disp
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Occured_Proc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctrl_Water_Lvl_FSM_Proc
</UL>

<P><STRONG><a name="[58]"></a>Ctrl_Water_Lvl_FSM_Proc</STRONG> (ARM, 6292 bytes, Stack size 56 bytes, appl.o(i.Ctrl_Water_Lvl_FSM_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 780 + Unknown Stack Size
<LI>Call Chain = Ctrl_Water_Lvl_FSM_Proc &rArr; Reset_Water_Lvl_Datas &rArr; Enable_Ext_Interrupt &rArr; Non_GPIO_Func_Set &rArr; Config_Port_Pin_Validate &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Stop
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Run
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Interrupt_Retrieve_Data_Arr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Consucc_Bits
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Present_State_By_IO_Ch
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Oper
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Read
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channel_Write
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext_Interrupt_Retrieve_Data_Arr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_Src_Interrupt_Data_Arr_By_Src
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Water_Lvl_Datas
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Data_Disp
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctrl_Water_Lvl_Error_Proc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Data_Lock_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Proc
</UL>

<P><STRONG><a name="[7c]"></a>Cur_Data_ID_Devs_Src_Basic_Oper_Func</STRONG> (ARM, 928 bytes, Stack size 48 bytes, dev_oper.o(i.Cur_Data_ID_Devs_Src_Basic_Oper_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 724 + Unknown Stack Size
<LI>Call Chain = Cur_Data_ID_Devs_Src_Basic_Oper_Func &rArr; Cur_Data_ID_Dev_Src_Basic_Oper_Func &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Data_ID_Dev_Src_Basic_Oper_Func
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Dev_Src_Access_Oper_Func
</UL>

<P><STRONG><a name="[7d]"></a>Data_Dev_Src_Access_Oper_Func</STRONG> (ARM, 768 bytes, Stack size 40 bytes, dev_oper.o(i.Data_Dev_Src_Access_Oper_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 764 + Unknown Stack Size
<LI>Call Chain = Data_Dev_Src_Access_Oper_Func &rArr; Cur_Data_ID_Devs_Src_Basic_Oper_Func &rArr; Cur_Data_ID_Dev_Src_Basic_Oper_Func &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Data_ID_Devs_Src_Basic_Oper_Func
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Next_Data_Conf_Parameter
</UL>

<P><STRONG><a name="[7e]"></a>Data_ID_Set_Para</STRONG> (ARM, 244 bytes, Stack size 24 bytes, gen_std_lib_part_1.o(i.Data_ID_Set_Para))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + Unknown Stack Size
<LI>Call Chain = Data_ID_Set_Para &rArr; Reset_Data_ID_Status &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Data_ID_Status
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Data_Retrieve_Para
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_IDs_Set_Para
</UL>

<P><STRONG><a name="[80]"></a>Data_IDs_Set_Para</STRONG> (ARM, 144 bytes, Stack size 16 bytes, gen_std_lib_part_1.o(i.Data_IDs_Set_Para))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = Data_IDs_Set_Para &rArr; Data_ID_Set_Para &rArr; Reset_Data_ID_Status &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_ID_Set_Para
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Data_Retrieve_Para
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[a5]"></a>Delay_MS</STRONG> (ARM, 52 bytes, Stack size 0 bytes, gen_std_lib_part_1.o(i.Delay_MS))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Press_Proc
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Char
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear_Screen
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Command_NO_BF
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Command
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Read_Command
</UL>

<P><STRONG><a name="[76]"></a>Delete_Src_Interrupt_Data_Arr_By_Src</STRONG> (ARM, 168 bytes, Stack size 24 bytes, isr.o(i.Delete_Src_Interrupt_Data_Arr_By_Src))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + Unknown Stack Size
<LI>Call Chain = Delete_Src_Interrupt_Data_Arr_By_Src &rArr; Reset_Src_Interrupt_Data_Arr &rArr; Reset_Src_Interrupt_Data_Arr_By_Specific_Index &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Src_Interrupt_Data_Arr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctrl_Water_Lvl_FSM_Proc
</UL>

<P><STRONG><a name="[83]"></a>Dev_ID_To_Interrupt_Src_ID_Conv</STRONG> (ARM, 1240 bytes, Stack size 8 bytes, isr.o(i.Dev_ID_To_Interrupt_Src_ID_Conv))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + Unknown Stack Size
<LI>Call Chain = Dev_ID_To_Interrupt_Src_ID_Conv &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Interrupt_Retrieve_Data_Arr
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext_Interrupt_Retrieve_Data_Arr
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Ext_Interrupt
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Ext_Interrupt
</UL>

<P><STRONG><a name="[84]"></a>Dev_IO_Chs_Map_Data_Validate</STRONG> (ARM, 316 bytes, Stack size 40 bytes, io_lib.o(i.Dev_IO_Chs_Map_Data_Validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = Dev_IO_Chs_Map_Data_Validate &rArr; Get_IO_Func_Mode &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_IO_Func_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Water_Lvl_Datas
</UL>

<P><STRONG><a name="[86]"></a>Disable_All_LCDs</STRONG> (ARM, 44 bytes, Stack size 8 bytes, lcd.o(i.Disable_All_LCDs))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = Disable_All_LCDs &rArr; LCD_Disable &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Process
</UL>

<P><STRONG><a name="[87]"></a>Disable_All_SWs</STRONG> (ARM, 44 bytes, Stack size 8 bytes, sw_lib.o(i.Disable_All_SWs))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + Unknown Stack Size
<LI>Call Chain = Disable_All_SWs &rArr; SW_Disable &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Process
</UL>

<P><STRONG><a name="[88]"></a>Disable_All_UARTs</STRONG> (ARM, 56 bytes, Stack size 8 bytes, uart.o(i.Disable_All_UARTs))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = Disable_All_UARTs &rArr; UART_Disable &rArr; Error_Or_Warning_UART_Proc &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Disable
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Reset_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Process
</UL>

<P><STRONG><a name="[8a]"></a>Disable_Ext_Interrupt</STRONG> (ARM, 392 bytes, Stack size 32 bytes, isr.o(i.Disable_Ext_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + Unknown Stack Size
<LI>Call Chain = Disable_Ext_Interrupt &rArr; Disable_Interrupt_Src &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Interrupt_Src
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_ID_To_Interrupt_Src_ID_Conv
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conv_Ext_Interrupt_Ch_ID_to_IO_Ch
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_Func_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_All_Interrupts
</UL>

<P><STRONG><a name="[8c]"></a>Disable_Interrupt_Src</STRONG> (ARM, 416 bytes, Stack size 16 bytes, isr.o(i.Disable_Interrupt_Src))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + Unknown Stack Size
<LI>Call Chain = Disable_Interrupt_Src &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Timer_Interrupt
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Ext_Interrupt
</UL>

<P><STRONG><a name="[8d]"></a>Disable_Timer_Interrupt</STRONG> (ARM, 200 bytes, Stack size 16 bytes, timer.o(i.Disable_Timer_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + Unknown Stack Size
<LI>Call Chain = Disable_Timer_Interrupt &rArr; Disable_Interrupt_Src &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Stop
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Interrupt_Src
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_All_Interrupts
</UL>

<P><STRONG><a name="[8e]"></a>Enable_Ext_Interrupt</STRONG> (ARM, 672 bytes, Stack size 32 bytes, isr.o(i.Enable_Ext_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 708 + Unknown Stack Size
<LI>Call Chain = Enable_Ext_Interrupt &rArr; Non_GPIO_Func_Set &rArr; Config_Port_Pin_Validate &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Interrupt_Src
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_ID_To_Interrupt_Src_ID_Conv
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conv_Ext_Interrupt_Ch_ID_to_IO_Ch
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Non_GPIO_Func_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Water_Lvl_Datas
</UL>

<P><STRONG><a name="[90]"></a>Enable_Interrupt_Src</STRONG> (ARM, 796 bytes, Stack size 32 bytes, isr.o(i.Enable_Interrupt_Src))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + Unknown Stack Size
<LI>Call Chain = Enable_Interrupt_Src &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Run
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Ext_Interrupt
</UL>

<P><STRONG><a name="[91]"></a>Error_Or_Warning_UART_Proc</STRONG> (ARM, 96 bytes, Stack size 8 bytes, uart.o(i.Error_Or_Warning_UART_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + In Cycle
<LI>Call Chain = Error_Or_Warning_UART_Proc &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channel_Write
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Put_Char
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Str
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Num
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Char
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_Char
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_No_Access
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Disable
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Allow_Access
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Enable_Ctrl
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_Enable_Ctrl
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Enable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Reset_Status
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Put_Str
</UL>

<P><STRONG><a name="[93]"></a>Error_or_Warning_Occured_Proc</STRONG> (ARM, 152 bytes, Stack size 8 bytes, appl.o(i.Error_or_Warning_Occured_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = Error_or_Warning_Occured_Proc &rArr; Ctrl_Water_Lvl_Error_Proc &rArr; LCD_Data_Disp &rArr;  LCD_Disp_Str (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctrl_Water_Lvl_Error_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_LCD_Proc
</UL>

<P><STRONG><a name="[51]"></a>Error_or_Warning_Proc</STRONG> (ARM, 128 bytes, Stack size 24 bytes, gen_std_lib_part_1.o(i.Error_or_Warning_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 636 + Unknown Stack Size
<LI>Call Chain = Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Error_Proc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Occured_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Bit_in_Data
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Len
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Status_Reset_Data_IDs
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Data_ID_Status
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num_To_Str_Conv_No_Conf_Size
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_File
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Flush
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_IDs_Set_Para
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_ID_Set_Para
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Consucc_Bits
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Src_Interrupt_Data_Arr_By_Src
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Press_Proc
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_No_Access
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Disable
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_DeInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Src_Interrupt_Data_Arr
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Data_Retrieve_Para
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Dev_Src_Access_Oper_Func
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Data_ID_Devs_Src_Basic_Oper_Func
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Data_ID_Dev_Src_Basic_Oper_Func
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Stop
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Run
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Interrupt_Retrieve_Data_Arr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Consucc_Bits
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Present_State_By_IO_Ch
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Oper
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Enable
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Allow_Access
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Port_Read
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_Dev_Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Next_Data_Conf_Parameter
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channel_Write
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext_Interrupt_Retrieve_Data_Arr
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Ext_Interrupt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_IO_Chs_Map_Data_Validate
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_Src_Interrupt_Data_Arr_By_Src
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_1_Timeout_Proc
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_0_Timeout_Proc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Water_Lvl_Datas
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Data_Disp
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctrl_Water_Lvl_FSM_Proc
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Reset
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Proc
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Read
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Para_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Ch_ID_Check_And_Alloc
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_SW_Ch
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_To_SW_Ch
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Ch_Validate
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Timer_1
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Timer_0
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Process
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Read_Command
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Timer_Interrupt
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Src_Interrupt_Data_Arr_Free_Index
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_All_Interrupts
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Ext_Interrupt_3
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Ext_Interrupt_2
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Ext_Interrupt_1
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Ext_Interrupt_0
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Interrupt_Src
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Interrupt_Src
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Ext_Interrupt
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_ID_To_Interrupt_Src_ID_Conv
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Src_Interrupt_Data_Arr_By_Specific_Index
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Conv_Ext_Interrupt_Ch_ID_to_IO_Ch
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Ch_UnConfig_By_IO_Ch
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Non_GPIO_Func_Set
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channels_Func_Set
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channel_Read
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_Validate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_Func_Reset
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_IO_Func_Mode
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Port_Pin_Range_Validate
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_GPIO_Func
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_IO_Func_Set_Validate
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Func_Set
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_IO_Func_Set_Validate
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Port_Pin_Validate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_GPIO_Func_Set
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Or_Warning_UART_Proc
</UL>

<P><STRONG><a name="[1b]"></a>Ext_Interrupt_0_Proc</STRONG> (ARM, 8 bytes, Stack size 0 bytes, appl.o(i.Ext_Interrupt_0_Proc))
<BR>[Address Reference Count : 1]<UL><LI> isr.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>Ext_Interrupt_1_Proc</STRONG> (ARM, 8 bytes, Stack size 0 bytes, appl.o(i.Ext_Interrupt_1_Proc))
<BR>[Address Reference Count : 1]<UL><LI> isr.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>Ext_Interrupt_2_Proc</STRONG> (ARM, 8 bytes, Stack size 0 bytes, appl.o(i.Ext_Interrupt_2_Proc))
<BR>[Address Reference Count : 1]<UL><LI> isr.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>Ext_Interrupt_3_Proc</STRONG> (ARM, 8 bytes, Stack size 0 bytes, appl.o(i.Ext_Interrupt_3_Proc))
<BR>[Address Reference Count : 1]<UL><LI> isr.o(.data)
</UL>
<P><STRONG><a name="[73]"></a>Ext_Interrupt_Retrieve_Data_Arr</STRONG> (ARM, 396 bytes, Stack size 32 bytes, isr.o(i.Ext_Interrupt_Retrieve_Data_Arr))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + Unknown Stack Size
<LI>Call Chain = Ext_Interrupt_Retrieve_Data_Arr &rArr; Reset_Src_Interrupt_Data_Arr &rArr; Reset_Src_Interrupt_Data_Arr_By_Specific_Index &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Src_Interrupt_Data_Arr_By_Src
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Src_Interrupt_Data_Arr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_ID_To_Interrupt_Src_ID_Conv
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctrl_Water_Lvl_FSM_Proc
</UL>

<P><STRONG><a name="[95]"></a>File_Flush</STRONG> (ARM, 88 bytes, Stack size 8 bytes, gen_std_lib_part_1.o(i.File_Flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + Unknown Stack Size
<LI>Call Chain = File_Flush &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_File
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
</UL>

<P><STRONG><a name="[85]"></a>Get_IO_Func_Mode</STRONG> (ARM, 360 bytes, Stack size 16 bytes, io_lib.o(i.Get_IO_Func_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + Unknown Stack Size
<LI>Call Chain = Get_IO_Func_Mode &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_Validate
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_IO_Chs_Map_Data_Validate
</UL>

<P><STRONG><a name="[8b]"></a>IO_Ch_Func_Reset</STRONG> (ARM, 528 bytes, Stack size 48 bytes, io_lib.o(i.IO_Ch_Func_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + In Cycle
<LI>Call Chain = IO_Ch_Func_Reset &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Consucc_Bits
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Ch_UnConfig_By_IO_Ch
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_Validate
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Func_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DeInit
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_DeInit
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DeInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Check_Busy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Ext_Interrupt
</UL>

<P><STRONG><a name="[9b]"></a>IO_Ch_To_SW_Ch</STRONG> (ARM, 200 bytes, Stack size 16 bytes, sw_lib.o(i.IO_Ch_To_SW_Ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + In Cycle
<LI>Call Chain = IO_Ch_To_SW_Ch &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_Validate
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Present_State_By_IO_Ch
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Oper
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Ch_UnConfig_By_IO_Ch
</UL>

<P><STRONG><a name="[5d]"></a>IO_Ch_Validate</STRONG> (ARM, 348 bytes, Stack size 24 bytes, io_lib.o(i.IO_Ch_Validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + In Cycle
<LI>Call Chain = IO_Ch_Validate &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_To_SW_Ch
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_Func_Reset
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_IO_Func_Mode
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Port_Pin_Range_Validate
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_GPIO_Func
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Port_Pin_Validate
</UL>

<P><STRONG><a name="[9c]"></a>IO_Channel_Read</STRONG> (ARM, 132 bytes, Stack size 32 bytes, io_lib.o(i.IO_Channel_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + In Cycle
<LI>Call Chain = IO_Channel_Read &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_GPIO_Func
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Read
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Read_Data_from_IO_Ch
</UL>

<P><STRONG><a name="[60]"></a>IO_Channel_Write</STRONG> (ARM, 272 bytes, Stack size 40 bytes, io_lib.o(i.IO_Channel_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + In Cycle
<LI>Call Chain = IO_Channel_Write &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_GPIO_Func
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Error_Proc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Char
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctrl_Water_Lvl_FSM_Proc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctrl_Water_Lvl_Error_Proc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Process
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Command_NO_BF
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Command
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Data_to_IO_Ch
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Read_Command
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Check_Busy
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Or_Warning_UART_Proc
</UL>

<P><STRONG><a name="[9d]"></a>IO_Channels_Func_Set</STRONG> (ARM, 720 bytes, Stack size 24 bytes, io_lib.o(i.IO_Channels_Func_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + In Cycle
<LI>Call Chain = IO_Channels_Func_Set &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IO_Chs
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Port_Pin_Range_Validate
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_IO_Func_Set_Validate
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_IO_Func_Set_Validate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_GPIO_Func_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Output_Dev_Init
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Check_Busy
</UL>

<P><STRONG><a name="[28]"></a>ISR_Brown_Out_Detect</STRONG> (ARM, 20 bytes, Stack size 4 bytes, main.o(i.ISR_Brown_Out_Detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ISR_Brown_Out_Detect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>ISR_Ext_Interrupt_0</STRONG> (ARM, 176 bytes, Stack size 48 bytes, isr.o(i.ISR_Ext_Interrupt_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = ISR_Ext_Interrupt_0 &rArr; Search_Src_Interrupt_Data_Arr_Free_Index &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Src_Interrupt_Data_Arr_Free_Index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>ISR_Ext_Interrupt_1</STRONG> (ARM, 176 bytes, Stack size 48 bytes, isr.o(i.ISR_Ext_Interrupt_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = ISR_Ext_Interrupt_1 &rArr; Search_Src_Interrupt_Data_Arr_Free_Index &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Src_Interrupt_Data_Arr_Free_Index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>ISR_Ext_Interrupt_2</STRONG> (ARM, 176 bytes, Stack size 48 bytes, isr.o(i.ISR_Ext_Interrupt_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = ISR_Ext_Interrupt_2 &rArr; Search_Src_Interrupt_Data_Arr_Free_Index &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Src_Interrupt_Data_Arr_Free_Index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>ISR_Ext_Interrupt_3</STRONG> (ARM, 176 bytes, Stack size 48 bytes, isr.o(i.ISR_Ext_Interrupt_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = ISR_Ext_Interrupt_3 &rArr; Search_Src_Interrupt_Data_Arr_Free_Index &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Src_Interrupt_Data_Arr_Free_Index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>ISR_Non_Vector_IRQ</STRONG> (ARM, 20 bytes, Stack size 4 bytes, isr.o(i.ISR_Non_Vector_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ISR_Non_Vector_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> isr.o(i.Reset_All_Interrupts)
</UL>
<P><STRONG><a name="[23]"></a>ISR_PLL</STRONG> (ARM, 20 bytes, Stack size 4 bytes, main.o(i.ISR_PLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ISR_PLL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>ISR_Timer_0</STRONG> (ARM, 148 bytes, Stack size 32 bytes, timer.o(i.ISR_Timer_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + Unknown Stack Size
<LI>Call Chain = ISR_Timer_0 &rArr; Search_Src_Interrupt_Data_Arr_Free_Index &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Stop
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Src_Interrupt_Data_Arr_Free_Index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>ISR_Timer_1</STRONG> (ARM, 428 bytes, Stack size 48 bytes, timer.o(i.ISR_Timer_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = ISR_Timer_1 &rArr; Search_Src_Interrupt_Data_Arr_Free_Index &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Stop
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Src_Interrupt_Data_Arr_Free_Index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>ISR_UART_0</STRONG> (ARM, 20 bytes, Stack size 4 bytes, uart.o(i.ISR_UART_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ISR_UART_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>ISR_UART_1</STRONG> (ARM, 20 bytes, Stack size 4 bytes, uart.o(i.ISR_UART_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ISR_UART_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[a0]"></a>Init_File</STRONG> (ARM, 316 bytes, Stack size 32 bytes, gen_std_lib_part_1.o(i.Init_File))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + Unknown Stack Size
<LI>Call Chain = Init_File &rArr; File_Flush &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Flush
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[e]"></a>LCD_Allow_Access</STRONG> (ARM, 80 bytes, Stack size 8 bytes, lcd.o(i.LCD_Allow_Access))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = LCD_Allow_Access &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_LCD_Proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[a3]"></a>LCD_Clear_Screen</STRONG> (ARM, 140 bytes, Stack size 16 bytes, lcd.o(i.LCD_Clear_Screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = LCD_Clear_Screen &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_MS
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Command
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_LCD_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Water_Lvl_Datas
</UL>

<P><STRONG><a name="[72]"></a>LCD_Data_Disp</STRONG> (ARM, 2368 bytes, Stack size 24 bytes, appl.o(i.LCD_Data_Disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 404 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = LCD_Data_Disp &rArr;  LCD_Disp_Str (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Str
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Num
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Goto_XY
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Char
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Water_Lvl_Datas
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctrl_Water_Lvl_FSM_Proc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctrl_Water_Lvl_Error_Proc
</UL>

<P><STRONG><a name="[b]"></a>LCD_DeInit</STRONG> (ARM, 348 bytes, Stack size 32 bytes, lcd.o(i.LCD_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 492 + Unknown Stack Size
<LI>Call Chain = LCD_DeInit &rArr; LCD_No_Access &rArr; LCD_Disable &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_No_Access
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_LCD_Proc
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_Func_Reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>LCD_Disable</STRONG> (ARM, 80 bytes, Stack size 8 bytes, lcd.o(i.LCD_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = LCD_Disable &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_LCD_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_No_Access
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_All_LCDs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[66]"></a>LCD_Disp_Char</STRONG> (ARM, 1044 bytes, Stack size 40 bytes, lcd.o(i.LCD_Disp_Char))
<BR><BR>[Stack]<UL><LI>Max Depth = 500 + Unknown Stack Size
<LI>Call Chain = LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_MS
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channel_Write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_From_Loc_to_XY
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Data_to_IO_Ch
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Check_Busy
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_LCD_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Error_Proc
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Str
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Num
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Data_Disp
</UL>

<P><STRONG><a name="[62]"></a>LCD_Disp_Goto_XY</STRONG> (ARM, 428 bytes, Stack size 32 bytes, lcd.o(i.LCD_Disp_Goto_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + In Cycle
<LI>Call Chain = LCD_Disp_Goto_XY &rArr;  Error_or_Warning_LCD_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Command
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_LCD_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Error_Proc
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_Char
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Data_Disp
</UL>

<P><STRONG><a name="[67]"></a>LCD_Disp_Num</STRONG> (ARM, 1152 bytes, Stack size 88 bytes, lcd.o(i.LCD_Disp_Num))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = LCD_Disp_Num &rArr;  LCD_Disp_Str (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Of
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Str
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Char
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_LCD_Proc
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Error_Proc
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Data_Disp
</UL>

<P><STRONG><a name="[63]"></a>LCD_Disp_Str</STRONG> (ARM, 204 bytes, Stack size 24 bytes, lcd.o(i.LCD_Disp_Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + Unknown Stack Size
<LI>Call Chain = LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Char
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_LCD_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Error_Proc
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_Char
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Num
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Data_Disp
</UL>

<P><STRONG><a name="[10]"></a>LCD_Enable</STRONG> (ARM, 80 bytes, Stack size 8 bytes, lcd.o(i.LCD_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = LCD_Enable &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_LCD_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Water_Lvl_Datas
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[a6]"></a>LCD_From_Loc_to_XY</STRONG> (ARM, 424 bytes, Stack size 16 bytes, lcd.o(i.LCD_From_Loc_to_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_LCD_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Char
</UL>

<P><STRONG><a name="[c]"></a>LCD_Init</STRONG> (ARM, 1428 bytes, Stack size 40 bytes, lcd.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + Unknown Stack Size
<LI>Call Chain = LCD_Init &rArr; Write_Bit_in_Data &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Bit_in_Data
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_MS
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear_Screen
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Command_NO_BF
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Command
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_LCD_Proc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channels_Func_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_HW_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>LCD_No_Access</STRONG> (ARM, 88 bytes, Stack size 8 bytes, lcd.o(i.LCD_No_Access))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = LCD_No_Access &rArr; LCD_Disable &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disable
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_LCD_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>LCD_Write</STRONG> (ARM, 1188 bytes, Stack size 56 bytes, lcd.o(i.LCD_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 708 + Unknown Stack Size
<LI>Call Chain = LCD_Write &rArr; Appl_Data_Retrieve_Para &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Data_Retrieve_Para
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Str
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Num
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Goto_XY
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Char
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_LCD_Proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[a4]"></a>LCD_Write_Command</STRONG> (ARM, 852 bytes, Stack size 32 bytes, lcd.o(i.LCD_Write_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + In Cycle
<LI>Call Chain = LCD_Write_Command &rArr;  Error_or_Warning_LCD_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_MS
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channel_Write
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Data_to_IO_Ch
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Check_Busy
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_LCD_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Goto_XY
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear_Screen
</UL>

<P><STRONG><a name="[a9]"></a>LCD_Write_Command_NO_BF</STRONG> (ARM, 404 bytes, Stack size 24 bytes, lcd.o(i.LCD_Write_Command_NO_BF))
<BR><BR>[Stack]<UL><LI>Max Depth = 468 + Unknown Stack Size
<LI>Call Chain = LCD_Write_Command_NO_BF &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_MS
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channel_Write
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Data_to_IO_Ch
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_LCD_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[56]"></a>Next_Data_Conf_Parameter</STRONG> (ARM, 160 bytes, Stack size 8 bytes, gen_std_lib_part_1.o(i.Next_Data_Conf_Parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 772 + Unknown Stack Size
<LI>Call Chain = Next_Data_Conf_Parameter &rArr; Data_Dev_Src_Access_Oper_Func &rArr; Cur_Data_ID_Devs_Src_Basic_Oper_Func &rArr; Cur_Data_ID_Dev_Src_Basic_Oper_Func &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Dev_Src_Access_Oper_Func
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Init
</UL>

<P><STRONG><a name="[8f]"></a>Non_GPIO_Func_Set</STRONG> (ARM, 200 bytes, Stack size 24 bytes, io_lib.o(i.Non_GPIO_Func_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + Unknown Stack Size
<LI>Call Chain = Non_GPIO_Func_Set &rArr; Config_Port_Pin_Validate &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Port_Pin_Validate
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Ext_Interrupt
</UL>

<P><STRONG><a name="[ac]"></a>Num_To_Str_Conv_No_Conf_Size</STRONG> (ARM, 340 bytes, Stack size 24 bytes, gen_std_lib_part_1.o(i.Num_To_Str_Conv_No_Conf_Size))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = Num_To_Str_Conv_No_Conf_Size &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print
</UL>

<P><STRONG><a name="[54]"></a>Output_Dev_Init</STRONG> (ARM, 128 bytes, Stack size 16 bytes, io_lib.o(i.Output_Dev_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + Unknown Stack Size
<LI>Call Chain = Output_Dev_Init &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channels_Func_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_HW_Init
</UL>

<P><STRONG><a name="[77]"></a>Port_Read</STRONG> (ARM, 272 bytes, Stack size 32 bytes, io_lib.o(i.Port_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + Unknown Stack Size
<LI>Call Chain = Port_Read &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Consucc_Bits
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_GPIO_Func
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctrl_Water_Lvl_FSM_Proc
</UL>

<P><STRONG><a name="[a8]"></a>Power_Of</STRONG> (ARM, 48 bytes, Stack size 0 bytes, gen_std_lib_part_1.o(i.Power_Of))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Num
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Num
</UL>

<P><STRONG><a name="[5e]"></a>Print</STRONG> (ARM, 700 bytes, Stack size 64 bytes, uart.o(i.Print))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + In Cycle
<LI>Call Chain = Print &rArr;  Error_Or_Warning_UART_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Put_Char
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Num_To_Str_Conv_No_Conf_Size
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Put_Str
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Or_Warning_UART_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Press_Proc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Data_ID_Dev_Src_Basic_Oper_Func
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Oper
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Goto_XY
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctrl_Water_Lvl_FSM_Proc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Data_Lock_Proc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_To_SW_Ch
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Data_to_IO_Ch
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_Validate
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_GPIO_Func
</UL>

<P><STRONG><a name="[ae]"></a>Put_Char</STRONG> (ARM, 144 bytes, Stack size 16 bytes, uart.o(i.Put_Char))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = Put_Char &rArr;  UART_Transmit_Char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Char
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Or_Warning_UART_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print
</UL>

<P><STRONG><a name="[af]"></a>Put_Str</STRONG> (ARM, 312 bytes, Stack size 32 bytes, uart.o(i.Put_Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + In Cycle
<LI>Call Chain = Put_Str &rArr;  UART_Transmit_Str (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Str
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Char
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Str_Len
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy (via Veneer)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Or_Warning_UART_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print
</UL>

<P><STRONG><a name="[b1]"></a>Reset_All_Interrupts</STRONG> (ARM, 216 bytes, Stack size 24 bytes, isr.o(i.Reset_All_Interrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 708 + Unknown Stack Size
<LI>Call Chain = Reset_All_Interrupts &rArr; Disable_Ext_Interrupt &rArr; Disable_Interrupt_Src &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Src_Interrupt_Data_Arr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Timer_Interrupt
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Ext_Interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Process
</UL>

<P><STRONG><a name="[7f]"></a>Reset_Data_ID_Status</STRONG> (ARM, 208 bytes, Stack size 16 bytes, gen_std_lib_part_1.o(i.Reset_Data_ID_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + Unknown Stack Size
<LI>Call Chain = Reset_Data_ID_Status &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Status_Reset_Data_IDs
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_ID_Set_Para
</UL>

<P><STRONG><a name="[b3]"></a>Reset_Data_IDs_Status</STRONG> (ARM, 44 bytes, Stack size 8 bytes, gen_std_lib_part_1.o(i.Reset_Data_IDs_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + Unknown Stack Size
<LI>Call Chain = Reset_Data_IDs_Status &rArr; Set_Status_Reset_Data_IDs &rArr; Reset_Data_ID_Status &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Status_Reset_Data_IDs
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Process
</UL>

<P><STRONG><a name="[99]"></a>Reset_IO_Chs</STRONG> (ARM, 16 bytes, Stack size 8 bytes, io_lib.o(i.Reset_IO_Chs))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Reset_IO_Chs &rArr; Reset_SW_Chs &rArr; Reset_SW_Ch &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_SW_Chs
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Ports
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channels_Func_Set
</UL>

<P><STRONG><a name="[b5]"></a>Reset_Ports</STRONG> (ARM, 104 bytes, Stack size 4 bytes, io_lib.o(i.Reset_Ports))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Reset_Ports
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IO_Chs
</UL>

<P><STRONG><a name="[b7]"></a>Reset_Process</STRONG> (ARM, 176 bytes, Stack size 8 bytes, main.o(i.Reset_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 748 + Unknown Stack Size
<LI>Call Chain = Reset_Process &rArr; Appl_Reset &rArr; Appl_Reset_Proc &rArr; Reset_Water_Lvl_Datas &rArr; Enable_Ext_Interrupt &rArr; Non_GPIO_Func_Set &rArr; Config_Port_Pin_Validate &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Data_IDs_Status
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Src_Interrupt_Data_Arr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channel_Write
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Reset
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_All_UARTs
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_All_SWs
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_All_LCDs
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_All_Interrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[b8]"></a>Reset_SW_Ch</STRONG> (ARM, 140 bytes, Stack size 8 bytes, sw_lib.o(i.Reset_SW_Ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = Reset_SW_Ch &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_No_Access
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Ch_UnConfig_By_IO_Ch
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_SW_Chs
</UL>

<P><STRONG><a name="[b6]"></a>Reset_SW_Chs</STRONG> (ARM, 60 bytes, Stack size 8 bytes, sw_lib.o(i.Reset_SW_Chs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Reset_SW_Chs &rArr; Reset_SW_Ch &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_SW_Ch
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IO_Chs
</UL>

<P><STRONG><a name="[82]"></a>Reset_Src_Interrupt_Data_Arr</STRONG> (ARM, 104 bytes, Stack size 8 bytes, isr.o(i.Reset_Src_Interrupt_Data_Arr))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + Unknown Stack Size
<LI>Call Chain = Reset_Src_Interrupt_Data_Arr &rArr; Reset_Src_Interrupt_Data_Arr_By_Specific_Index &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Src_Interrupt_Data_Arr_By_Specific_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Interrupt_Retrieve_Data_Arr
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext_Interrupt_Retrieve_Data_Arr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delete_Src_Interrupt_Data_Arr_By_Src
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Process
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_All_Interrupts
</UL>

<P><STRONG><a name="[5b]"></a>Reset_Water_Lvl_Datas</STRONG> (ARM, 772 bytes, Stack size 16 bytes, appl.o(i.Reset_Water_Lvl_Datas))
<BR><BR>[Stack]<UL><LI>Max Depth = 724 + Unknown Stack Size
<LI>Call Chain = Reset_Water_Lvl_Datas &rArr; Enable_Ext_Interrupt &rArr; Non_GPIO_Func_Set &rArr; Config_Port_Pin_Validate &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Enable_Ctrl
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_Enable_Ctrl
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Enable
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Stop
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Enable
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Allow_Access
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Enable
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear_Screen
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Ext_Interrupt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_IO_Chs_Map_Data_Validate
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Data_Disp
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Data_Lock_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctrl_Water_Lvl_FSM_Proc
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Reset_Proc
</UL>

<P><STRONG><a name="[15]"></a>SW_Allow_Access</STRONG> (ARM, 92 bytes, Stack size 8 bytes, sw_lib.o(i.SW_Allow_Access))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + Unknown Stack Size
<LI>Call Chain = SW_Allow_Access &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Water_Lvl_Datas
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sw_lib.o(i.SW_Oper)
<LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[ba]"></a>SW_Ch_ID_Check_And_Alloc</STRONG> (ARM, 660 bytes, Stack size 48 bytes, sw_lib.o(i.SW_Ch_ID_Check_And_Alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + Unknown Stack Size
<LI>Call Chain = SW_Ch_ID_Check_And_Alloc &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Consucc_Bits
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Consucc_Bits
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Init
</UL>

<P><STRONG><a name="[9a]"></a>SW_Ch_UnConfig_By_IO_Ch</STRONG> (ARM, 120 bytes, Stack size 16 bytes, sw_lib.o(i.SW_Ch_UnConfig_By_IO_Ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + In Cycle
<LI>Call Chain = SW_Ch_UnConfig_By_IO_Ch &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_SW_Ch
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_To_SW_Ch
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_Func_Reset
</UL>

<P><STRONG><a name="[12]"></a>SW_DeInit</STRONG> (ARM, 208 bytes, Stack size 24 bytes, sw_lib.o(i.SW_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 660 + Unknown Stack Size
<LI>Call Chain = SW_DeInit &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_No_Access
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Ch_Validate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_Func_Reset
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sw_lib.o(i.SW_Oper)
<LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>SW_Disable</STRONG> (ARM, 88 bytes, Stack size 8 bytes, sw_lib.o(i.SW_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = SW_Disable &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_No_Access
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_All_SWs
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sw_lib.o(i.SW_Oper)
<LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>SW_Enable</STRONG> (ARM, 92 bytes, Stack size 8 bytes, sw_lib.o(i.SW_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + Unknown Stack Size
<LI>Call Chain = SW_Enable &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Water_Lvl_Datas
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sw_lib.o(i.SW_Oper)
<LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>SW_Init</STRONG> (ARM, 380 bytes, Stack size 32 bytes, sw_lib.o(i.SW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 716 + Unknown Stack Size
<LI>Call Chain = SW_Init &rArr; SW_Ch_ID_Check_And_Alloc &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Para_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Ch_ID_Check_And_Alloc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channels_Func_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_HW_Init
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sw_lib.o(i.SW_Oper)
<LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>SW_No_Access</STRONG> (ARM, 88 bytes, Stack size 8 bytes, sw_lib.o(i.SW_No_Access))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = SW_No_Access &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Disable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_DeInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_SW_Ch
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sw_lib.o(i.SW_Oper)
<LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[71]"></a>SW_Oper</STRONG> (ARM, 664 bytes, Stack size 32 bytes, sw_lib.o(i.SW_Oper))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + In Cycle
<LI>Call Chain = SW_Oper &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Press_Proc
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_To_SW_Ch
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Ch_Validate
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctrl_Water_Lvl_FSM_Proc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctrl_Water_Lvl_Error_Proc
</UL>

<P><STRONG><a name="[bc]"></a>SW_Para_Init</STRONG> (ARM, 220 bytes, Stack size 24 bytes, sw_lib.o(i.SW_Para_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 660 + Unknown Stack Size
<LI>Call Chain = SW_Para_Init &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Ch_Validate
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Init
</UL>

<P><STRONG><a name="[79]"></a>SW_Present_State_By_IO_Ch</STRONG> (ARM, 280 bytes, Stack size 24 bytes, sw_lib.o(i.SW_Present_State_By_IO_Ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 660 + Unknown Stack Size
<LI>Call Chain = SW_Present_State_By_IO_Ch &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Read
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_To_SW_Ch
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Ch_Validate
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctrl_Water_Lvl_FSM_Proc
</UL>

<P><STRONG><a name="[18]"></a>SW_Press_Proc</STRONG> (ARM, 1036 bytes, Stack size 24 bytes, sw_lib.o(i.SW_Press_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 660 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = SW_Press_Proc &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_MS
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Read
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Ch_Validate
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Oper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[bd]"></a>SW_Read</STRONG> (ARM, 212 bytes, Stack size 16 bytes, sw_lib.o(i.SW_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + In Cycle
<LI>Call Chain = SW_Read &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Ch_Validate
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channel_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Press_Proc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Present_State_By_IO_Ch
</UL>

<P><STRONG><a name="[94]"></a>Search_Src_Interrupt_Data_Arr_By_Src</STRONG> (ARM, 192 bytes, Stack size 8 bytes, isr.o(i.Search_Src_Interrupt_Data_Arr_By_Src))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + Unknown Stack Size
<LI>Call Chain = Search_Src_Interrupt_Data_Arr_By_Src &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Interrupt_Retrieve_Data_Arr
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext_Interrupt_Retrieve_Data_Arr
</UL>

<P><STRONG><a name="[9f]"></a>Search_Src_Interrupt_Data_Arr_Free_Index</STRONG> (ARM, 124 bytes, Stack size 8 bytes, isr.o(i.Search_Src_Interrupt_Data_Arr_Free_Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + Unknown Stack Size
<LI>Call Chain = Search_Src_Interrupt_Data_Arr_Free_Index &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Timer_1
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Timer_0
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Ext_Interrupt_3
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Ext_Interrupt_2
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Ext_Interrupt_1
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Ext_Interrupt_0
</UL>

<P><STRONG><a name="[b4]"></a>Set_Status_Reset_Data_IDs</STRONG> (ARM, 100 bytes, Stack size 16 bytes, gen_std_lib_part_1.o(i.Set_Status_Reset_Data_IDs))
<BR><BR>[Stack]<UL><LI>Max Depth = 668 + Unknown Stack Size
<LI>Call Chain = Set_Status_Reset_Data_IDs &rArr; Reset_Data_ID_Status &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Data_ID_Status
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Data_IDs_Status
</UL>

<P><STRONG><a name="[65]"></a>Str_Len</STRONG> (ARM, 80 bytes, Stack size 8 bytes, gen_std_lib_part_1.o(i.Str_Len))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = Str_Len &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Error_Proc
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Put_Str
</UL>

<P><STRONG><a name="[78]"></a>Test_Consucc_Bits</STRONG> (ARM, 308 bytes, Stack size 24 bytes, gen_std_lib_part_1.o(i.Test_Consucc_Bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = Test_Consucc_Bits &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctrl_Water_Lvl_FSM_Proc
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Ch_ID_Check_And_Alloc
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Ch_Validate
</UL>

<P><STRONG><a name="[29]"></a>Timer_0_Timeout_Proc</STRONG> (ARM, 204 bytes, Stack size 8 bytes, appl.o(i.Timer_0_Timeout_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + Unknown Stack Size
<LI>Call Chain = Timer_0_Timeout_Proc &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>Timer_1_Timeout_Proc</STRONG> (ARM, 204 bytes, Stack size 8 bytes, appl.o(i.Timer_1_Timeout_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + Unknown Stack Size
<LI>Call Chain = Timer_1_Timeout_Proc &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.data)
</UL>
<P><STRONG><a name="[74]"></a>Timer_Interrupt_Retrieve_Data_Arr</STRONG> (ARM, 616 bytes, Stack size 40 bytes, timer.o(i.Timer_Interrupt_Retrieve_Data_Arr))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = Timer_Interrupt_Retrieve_Data_Arr &rArr; Reset_Src_Interrupt_Data_Arr &rArr; Reset_Src_Interrupt_Data_Arr_By_Specific_Index &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Search_Src_Interrupt_Data_Arr_By_Src
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Src_Interrupt_Data_Arr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Stop
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dev_ID_To_Interrupt_Src_ID_Conv
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctrl_Water_Lvl_FSM_Proc
</UL>

<P><STRONG><a name="[7a]"></a>Timer_Run</STRONG> (ARM, 1472 bytes, Stack size 40 bytes, timer.o(i.Timer_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 708 + Unknown Stack Size
<LI>Call Chain = Timer_Run &rArr; Enable_Interrupt_Src &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Stop
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Interrupt_Src
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctrl_Water_Lvl_FSM_Proc
</UL>

<P><STRONG><a name="[70]"></a>Timer_Stop</STRONG> (ARM, 416 bytes, Stack size 24 bytes, timer.o(i.Timer_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = Timer_Stop &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Run
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Interrupt_Retrieve_Data_Arr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Water_Lvl_Datas
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctrl_Water_Lvl_FSM_Proc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctrl_Water_Lvl_Error_Proc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Data_Lock_Proc
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Timer_1
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Timer_0
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Timer_Interrupt
</UL>

<P><STRONG><a name="[6]"></a>UART_Allow_Access</STRONG> (ARM, 88 bytes, Stack size 8 bytes, uart.o(i.UART_Allow_Access))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = UART_Allow_Access &rArr; Error_Or_Warning_UART_Proc &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Or_Warning_UART_Proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>UART_DeInit</STRONG> (ARM, 388 bytes, Stack size 16 bytes, uart.o(i.UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 660 + Unknown Stack Size
<LI>Call Chain = UART_DeInit &rArr; File_Flush &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Flush
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_Func_Reset
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Or_Warning_UART_Proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>UART_Disable</STRONG> (ARM, 88 bytes, Stack size 8 bytes, uart.o(i.UART_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = UART_Disable &rArr; Error_Or_Warning_UART_Proc &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Or_Warning_UART_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_No_Access
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_All_UARTs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>UART_Enable</STRONG> (ARM, 88 bytes, Stack size 8 bytes, uart.o(i.UART_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = UART_Enable &rArr; Error_Or_Warning_UART_Proc &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Or_Warning_UART_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Water_Lvl_Datas
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>UART_Init</STRONG> (ARM, 716 bytes, Stack size 24 bytes, uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 700 + Unknown Stack Size
<LI>Call Chain = UART_Init &rArr; Init_File &rArr; File_Flush &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_File
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Non_GPIO_Func_Set
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Or_Warning_UART_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_HW_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>UART_No_Access</STRONG> (ARM, 92 bytes, Stack size 8 bytes, uart.o(i.UART_No_Access))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = UART_No_Access &rArr; UART_Disable &rArr; Error_Or_Warning_UART_Proc &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Disable
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Or_Warning_UART_Proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>UART_Receive_Char</STRONG> (ARM, 788 bytes, Stack size 32 bytes, uart.o(i.UART_Receive_Char))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = UART_Receive_Char &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Char
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_Enable_Ctrl
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Str
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Goto_XY
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Or_Warning_UART_Proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>UART_Receive_Enable_Ctrl</STRONG> (ARM, 140 bytes, Stack size 8 bytes, uart.o(i.UART_Receive_Enable_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = UART_Receive_Enable_Ctrl &rArr; Error_Or_Warning_UART_Proc &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Or_Warning_UART_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_Char
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Water_Lvl_Datas
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[89]"></a>UART_Reset_Status</STRONG> (ARM, 216 bytes, Stack size 8 bytes, uart.o(i.UART_Reset_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = UART_Reset_Status &rArr; Error_Or_Warning_UART_Proc &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Or_Warning_UART_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_All_UARTs
</UL>

<P><STRONG><a name="[a]"></a>UART_Transmit</STRONG> (ARM, 936 bytes, Stack size 56 bytes, uart.o(i.UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 708 + Unknown Stack Size
<LI>Call Chain = UART_Transmit &rArr; Appl_Data_Retrieve_Para &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Str
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Num
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Char
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Data_Retrieve_Para
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Or_Warning_UART_Proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>UART_Transmit_Char</STRONG> (ARM, 224 bytes, Stack size 16 bytes, uart.o(i.UART_Transmit_Char))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = UART_Transmit_Char &rArr; Error_Or_Warning_UART_Proc &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Or_Warning_UART_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Put_Char
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Str
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Num
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Error_Proc
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_Char
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Put_Str
</UL>

<P><STRONG><a name="[1a]"></a>UART_Transmit_Enable_Ctrl</STRONG> (ARM, 140 bytes, Stack size 8 bytes, uart.o(i.UART_Transmit_Enable_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = UART_Transmit_Enable_Ctrl &rArr; Error_Or_Warning_UART_Proc &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Or_Warning_UART_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Water_Lvl_Datas
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_oper.o(.data)
</UL>
<P><STRONG><a name="[68]"></a>UART_Transmit_Num</STRONG> (ARM, 1156 bytes, Stack size 104 bytes, uart.o(i.UART_Transmit_Num))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = UART_Transmit_Num &rArr; UART_Transmit_Str &rArr; UART_Transmit_Char &rArr; Error_Or_Warning_UART_Proc &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Str
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Char
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Of
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Or_Warning_UART_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Error_Proc
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit
</UL>

<P><STRONG><a name="[64]"></a>UART_Transmit_Str</STRONG> (ARM, 204 bytes, Stack size 24 bytes, uart.o(i.UART_Transmit_Str))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = UART_Transmit_Str &rArr; UART_Transmit_Char &rArr; Error_Or_Warning_UART_Proc &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Char
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Or_Warning_UART_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Num
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Error_Proc
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Put_Str
</UL>

<P><STRONG><a name="[aa]"></a>Write_Bit_in_Data</STRONG> (ARM, 152 bytes, Stack size 8 bytes, gen_std_lib_part_1.o(i.Write_Bit_in_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + Unknown Stack Size
<LI>Call Chain = Write_Bit_in_Data &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[33]"></a>main</STRONG> (ARM, 48 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 796 + Unknown Stack Size
<LI>Call Chain = main &rArr; Appl_Proc &rArr; Ctrl_Water_Lvl_FSM_Proc &rArr; Reset_Water_Lvl_Datas &rArr; Enable_Ext_Interrupt &rArr; Non_GPIO_Func_Set &rArr; Config_Port_Pin_Validate &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Proc
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2c]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>Set_Data_Lock_Proc</STRONG> (ARM, 76 bytes, Stack size 8 bytes, appl.o(i.Set_Data_Lock_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Set_Data_Lock_Proc &rArr; Print &rArr;  Error_Or_Warning_UART_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Stop
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Water_Lvl_Datas
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ctrl_Water_Lvl_FSM_Proc
</UL>

<P><STRONG><a name="[7b]"></a>Cur_Data_ID_Dev_Src_Basic_Oper_Func</STRONG> (ARM, 1832 bytes, Stack size 40 bytes, dev_oper.o(i.Cur_Data_ID_Dev_Src_Basic_Oper_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + Unknown Stack Size
<LI>Call Chain = Cur_Data_ID_Dev_Src_Basic_Oper_Func &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cur_Data_ID_Devs_Src_Basic_Oper_Func
</UL>

<P><STRONG><a name="[6a]"></a>Config_GPIO_Func_Set</STRONG> (ARM, 896 bytes, Stack size 32 bytes, io_lib.o(i.Config_GPIO_Func_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = Config_GPIO_Func_Set &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Func_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channels_Func_Set
</UL>

<P><STRONG><a name="[6d]"></a>Config_Port_Pin_Validate</STRONG> (ARM, 156 bytes, Stack size 16 bytes, io_lib.o(i.Config_Port_Pin_Validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + Unknown Stack Size
<LI>Call Chain = Config_Port_Pin_Validate &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_Validate
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Non_GPIO_Func_Set
</UL>

<P><STRONG><a name="[81]"></a>Debug_IO_Func_Set_Validate</STRONG> (ARM, 92 bytes, Stack size 8 bytes, io_lib.o(i.Debug_IO_Func_Set_Validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = Debug_IO_Func_Set_Validate &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channels_Func_Set
</UL>

<P><STRONG><a name="[6b]"></a>GPIO_Func_Set</STRONG> (ARM, 360 bytes, Stack size 24 bytes, io_lib.o(i.GPIO_Func_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = GPIO_Func_Set &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_Func_Reset
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_GPIO_Func_Set
</UL>

<P><STRONG><a name="[9e]"></a>Trace_IO_Func_Set_Validate</STRONG> (ARM, 92 bytes, Stack size 8 bytes, io_lib.o(i.Trace_IO_Func_Set_Validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = Trace_IO_Func_Set_Validate &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channels_Func_Set
</UL>

<P><STRONG><a name="[6e]"></a>Conv_Ext_Interrupt_Ch_ID_to_IO_Ch</STRONG> (ARM, 468 bytes, Stack size 8 bytes, isr.o(i.Conv_Ext_Interrupt_Ch_ID_to_IO_Ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + Unknown Stack Size
<LI>Call Chain = Conv_Ext_Interrupt_Ch_ID_to_IO_Ch &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Ext_Interrupt
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Ext_Interrupt
</UL>

<P><STRONG><a name="[b9]"></a>Reset_Src_Interrupt_Data_Arr_By_Specific_Index</STRONG> (ARM, 96 bytes, Stack size 8 bytes, isr.o(i.Reset_Src_Interrupt_Data_Arr_By_Specific_Index))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + Unknown Stack Size
<LI>Call Chain = Reset_Src_Interrupt_Data_Arr_By_Specific_Index &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Src_Interrupt_Data_Arr
</UL>

<P><STRONG><a name="[92]"></a>Error_or_Warning_LCD_Proc</STRONG> (ARM, 80 bytes, Stack size 16 bytes, lcd.o(i.Error_or_Warning_LCD_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Error_Proc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Occured_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_No_Access
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disable
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DeInit
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Allow_Access
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Enable
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Str
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Num
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Goto_XY
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Char
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear_Screen
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Command_NO_BF
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Command
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_From_Loc_to_XY
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Data_to_IO_Ch
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Read_Data_from_IO_Ch
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Read_Command
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Check_Busy
</UL>

<P><STRONG><a name="[a1]"></a>LCD_Check_Busy</STRONG> (ARM, 900 bytes, Stack size 48 bytes, lcd.o(i.LCD_Check_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + In Cycle
<LI>Call Chain = LCD_Check_Busy &rArr;  Error_or_Warning_LCD_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channel_Write
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Read_Command
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_LCD_Proc
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channels_Func_Set
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Ch_Func_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Char
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Command
</UL>

<P><STRONG><a name="[a2]"></a>LCD_Read_Command</STRONG> (ARM, 752 bytes, Stack size 40 bytes, lcd.o(i.LCD_Read_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + In Cycle
<LI>Call Chain = LCD_Read_Command &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_MS
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channel_Write
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Read_Data_from_IO_Ch
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_LCD_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Check_Busy
</UL>

<P><STRONG><a name="[ab]"></a>LCD_Read_Data_from_IO_Ch</STRONG> (ARM, 268 bytes, Stack size 32 bytes, lcd.o(i.LCD_Read_Data_from_IO_Ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + In Cycle
<LI>Call Chain = LCD_Read_Data_from_IO_Ch &rArr;  Error_or_Warning_LCD_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_LCD_Proc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channel_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Read_Command
</UL>

<P><STRONG><a name="[a7]"></a>LCD_Write_Data_to_IO_Ch</STRONG> (ARM, 268 bytes, Stack size 32 bytes, lcd.o(i.LCD_Write_Data_to_IO_Ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + In Cycle
<LI>Call Chain = LCD_Write_Data_to_IO_Ch &rArr;  Error_or_Warning_LCD_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Channel_Write
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_LCD_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Disp_Char
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Command_NO_BF
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Write_Command
</UL>

<P><STRONG><a name="[97]"></a>HW_Init</STRONG> (ARM, 76 bytes, Stack size 8 bytes, main.o(i.HW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 732 + Unknown Stack Size
<LI>Call Chain = HW_Init &rArr; Appl_HW_Init &rArr; SW_Init &rArr; SW_Ch_ID_Check_And_Alloc &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Appl_HW_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLL_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IO_Chs
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[98]"></a>PLL_Init</STRONG> (ARM, 80 bytes, Stack size 0 bytes, main.o(i.PLL_Init))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[be]"></a>System_Init</STRONG> (ARM, 172 bytes, Stack size 8 bytes, main.o(i.System_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = System_Init &rArr; Reset_Process &rArr; Appl_Reset &rArr; Appl_Reset_Proc &rArr; Reset_Water_Lvl_Datas &rArr; Enable_Ext_Interrupt &rArr; Non_GPIO_Func_Set &rArr; Config_Port_Pin_Validate &rArr; Error_or_Warning_Proc &rArr; Comm_Error_Proc &rArr; LCD_Disp_Str &rArr; LCD_Disp_Char &rArr; LCD_From_Loc_to_XY &rArr; Error_or_Warning_LCD_Proc &rArr;  Comm_Error_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_IDs_Set_Para
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Process
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>SW_Ch_Validate</STRONG> (ARM, 144 bytes, Stack size 24 bytes, sw_lib.o(i.SW_Ch_Validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = SW_Ch_Validate &rArr;  Error_or_Warning_Proc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Consucc_Bits
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_or_Warning_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Press_Proc
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_DeInit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Present_State_By_IO_Ch
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Oper
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Read
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SW_Para_Init
</UL>

<P><STRONG><a name="[4e]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[4d]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[4c]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[4f]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[49]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
